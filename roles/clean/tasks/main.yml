---
- name: Validate installation_device
  ansible.builtin.assert:
    that:
      - installation_device is defined
      - installation_device is match("^(\/dev\/[a-z]+)$")
    fail_msg: "The installation_device variable must be defined and match the pattern ^/dev/[a-z]+$"
    success_msg: "The installation_device variable is defined and matches the pattern ^/dev/[a-z]+$"

- name: Determine VG information from Installation Disk
  ansible.builtin.shell:
    cmd: |
      pvs --select 'pv_name=~"{{ installation_device }}"' --noheadings -o vg_name,pv_name --reportformat=json | jq -cr '.report[].pv'
  register: vg_info_result
  changed_when: false
  ignore_errors: true

- name: Set VG information
  ansible.builtin.set_fact:
    vg_info: "{{ vg_info_result.stdout | from_json }}"
  when:
    - vg_info_result.rc == 0
    - vg_info_result.stdout != ""

- name: Deactivate LVs
  ansible.builtin.shell:
    cmd: |
      lvchange -an --force {{ item.vg_name }}
  with_items: "{{ vg_info }}"
  when:
    - vg_info_result.rc == 0
    - vg_info_result.stdout != ""
  register: lvchange_result
  changed_when: lvchange_result.rc == 0

- name: Remove LVs
  ansible.builtin.shell:
    cmd: |
      lvremove -f {{ item.vg_name }}
  with_items: "{{ vg_info }}"
  when:
    - vg_info_result.rc == 0
    - vg_info_result.stdout != ""
  register: lvremove_result
  changed_when: lvremove_result.rc == 0

- name: Remove VGs
  ansible.builtin.shell:
    cmd: |
      vgremove -f {{ item.vg_name }}
  with_items: "{{ vg_info }}"
  when:
    - vg_info_result.rc == 0
    - vg_info_result.stdout != ""
  register: vgremove_result
  changed_when: vgremove_result.rc == 0

- name: Remove PVs
  ansible.builtin.shell:
    cmd: |
      pvremove -f {{ item.pv_name }}
  with_items: "{{ vg_info }}"
  when:
    - vg_info_result.rc == 0
    - vg_info_result.stdout != ""
  register: pvremove_result
  changed_when: pvremove_result.rc == 0

- name: Wipe LVM data
  ansible.builtin.shell:
    cmd: |
      wipefs -a {{ installation_device }} && \
        dd if=/dev/zero of={{ installation_device }} bs=1M count=1
  when:
    - vg_info_result.rc == 0
    - vg_info_result.stdout != ""
  register: wipefs_result
  changed_when: wipefs_result.rc == 0

- name: Clean disk
  ansible.builtin.shell:
    cmd: |
      sgdisk -Z {{ installation_device }}
  register: sgdisk_result
  changed_when: sgdisk_result.rc == 0

- name: Execute partprobe
  ansible.builtin.shell:
    cmd: |
      partprobe {{ installation_device }}
  changed_when: false
